{"version":3,"sources":["scripts/main.js"],"names":["tbody","document","querySelector","scoreField","btnReset","createElement","messageStart","messageLose","messageWin","classList","add","textContent","board","tempBoard","rows","length","cells","score","matrix","children","map","row","getStart","btnStart","replaceWith","getRandomCell","render","findEmptyCell","y","x","randomNumber","emptyCells","forEach","rowIndex","cell","cellIndex","push","Math","floor","random","slideHorizontally","direction","newRow","filter","unshift","slice","toMerge","check","toUpdateBoard","slideVertically","newClmnDirection","elem","JSON","stringify","toUpdateCell","cellMerged","rowMerged","parse","currentCell","innerText","isLose","flat","every","remove","addEventListener","e","preventDefault","target","code"],"mappings":"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","file":"main.8411a556.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tbody = document.querySelector('tbody');\nconst scoreField = document.querySelector('.game-score');\n\nconst btnReset = document.createElement('button');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nbtnReset.classList.add('button');\nbtnReset.classList.add('restart');\nbtnReset.textContent = ('Restart');\n\nconst rows = tbody.rows.length;\nconst cells = rows;\n\nlet board;\nlet tempBoard;\n\nlet score = 0;\n\nconst matrix = [...tbody.children].map(row => [...row.children]);\n\nfunction getStart() {\n  btnStart.replaceWith(btnReset);\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  getRandomCell();\n  getRandomCell();\n\n  render();\n}\n\nfunction getRandomCell() {\n  const [y, x] = findEmptyCell();\n\n  board[y][x] = randomNumber();\n}\n\nfunction findEmptyCell() {\n  const emptyCells = [];\n\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, cellIndex]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\n\nconst btnStart = document.querySelector('.start');\n\nfunction randomNumber() {\n  return Math.random() >= 0.9 ? 4 : 2;\n}\n\nfunction slideHorizontally(direction) {\n  for (let row = 0; row < rows; row++) {\n    const newRow = board[row].filter(cell => cell !== 0);\n\n    if (newRow.length !== 4) {\n      if (direction === 'right') {\n        do {\n          newRow.unshift(0);\n        } while (newRow.length < 4);\n      } else {\n        do {\n          newRow.push(0);\n        } while (newRow.length < 4);\n      }\n    }\n    board.push(newRow);\n  }\n\n  board = board.slice(-4);\n\n  toMerge(direction);\n  check();\n\n  toUpdateBoard();\n}\n\nfunction slideVertically(direction) {\n  for (let row = 0; row < rows; row++) {\n    const newRow = [];\n\n    for (let cell = 0; cell < cells; cell++) {\n      newRow.push(board[cell][row]);\n    }\n\n    const newClmnDirection = newRow.filter(elem => elem !== 0);\n\n    if (newClmnDirection.length !== cells) {\n      if (direction === 'down') {\n        do {\n          newClmnDirection.unshift(0);\n        } while (newClmnDirection.length < cells);\n      } else {\n        do {\n          newClmnDirection.push(0);\n        } while (newClmnDirection.length < cells);\n      }\n    }\n\n    for (let cell = 0; cell < cells; cell++) {\n      board[cell][row] = newClmnDirection[cell];\n    }\n  }\n\n  toMerge(direction);\n  check();\n\n  toUpdateBoard();\n}\n\nfunction toUpdateBoard() {\n  if (JSON.stringify(tempBoard) !== JSON.stringify(board)) {\n    getRandomCell();\n  }\n\n  render();\n}\n\nfunction toUpdateCell([row, cell], [cellMerged, rowMerged]) {\n  tempBoard = JSON.parse(JSON.stringify(board));\n\n  board[row][cell] *= 2;\n  board[rowMerged][cellMerged] = 0;\n\n  score += board[row][cell];\n}\n\nfunction toMerge(direction) {\n  if (direction === 'left' || direction === 'right') {\n    board.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        if (direction === 'left' && cell === row[cellIndex + 1] && cell > 0) {\n          toUpdateCell([rowIndex, cellIndex], [cellIndex + 1, rowIndex]);\n        }\n\n        if (direction === 'right' && cell === row[cellIndex - 1] && cell > 0) {\n          toUpdateCell([rowIndex, cellIndex], [cellIndex - 1, rowIndex]);\n        }\n      });\n    });\n  }\n\n  if (direction === 'down' || direction === 'up') {\n    if (direction === 'down') {\n      for (let row = rows - 1; row > 0; row--) {\n        for (let cell = 0; cell < cells; cell++) {\n          const currentCell = board[row][cell];\n\n          if (currentCell === board[row - 1][cell] && currentCell > 0) {\n            toUpdateCell([row, cell], [cell, row - 1]);\n          }\n        }\n      }\n    }\n\n    if (direction === 'up') {\n      for (let row = 0; row < rows - 1; row++) {\n        for (let cell = 0; cell < cells; cell++) {\n          const currentCell = board[row][cell];\n\n          if (currentCell === board[row + 1][cell] && currentCell > 0) {\n            toUpdateCell([row, cell], [cell, row + 1]);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction render() {\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      const elem = matrix[rowIndex][cellIndex];\n\n      scoreField.textContent = score;\n\n      elem.classList = 'field-cell';\n\n      if (cell === 0) {\n        elem.innerText = '';\n      } else {\n        elem.innerText = cell;\n        elem.classList.add(`field-cell--${cell}`);\n      }\n    });\n  });\n\n  tempBoard = JSON.parse(JSON.stringify(board));\n}\n\nfunction check() {\n  const isLose = board.flat().every(cell => cell > 0);\n\n  for (const row of board) {\n    for (const cell of row) {\n      if (cell === 2048) {\n        messageWin.classList.remove('hidden');\n        messageStart.classList.add('hidden');\n      }\n    }\n  }\n\n  if (isLose) {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  }\n}\n\ndocument.addEventListener('click', (e) => {\n  e.preventDefault();\n\n  if (e.target === btnStart || e.target === btnReset) {\n    getStart();\n  }\n});\n\ndocument.addEventListener('keyup', (e) => {\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideHorizontally('left');\n      break;\n    case 'ArrowRight':\n      slideHorizontally('right');\n      break;\n\n    case 'ArrowUp':\n      slideVertically('up');\n      break;\n    case 'ArrowDown':\n      slideVertically('down');\n      break;\n\n    default:\n      break;\n  }\n});\n"]}